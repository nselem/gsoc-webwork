########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   #"PGcourse.pl",      # Customization file for the course
    "Coalescent.pl",
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");
$I=random(0,8,1); ## We have 9 stored population 
$Population=4;

@Sub=(); @Keys;
## We choose two sequences from that population
($name,%SubPop)=&pick_population($I,$Population); 

foreach $key (keys %SubPop){
        $Keys[$k]=$key;
        $Sub[$k]=$SubPop{$key};
        $k++;}

$start=random(1,80,1);
$end=random($start+500,1081);

@array1=split("",$Sub[0]);
@array2=split("",$Sub[1]);
@array3=split("",$Sub[2]);
@array4=split("",$Sub[3]);


## Now lets color bold if two aminoacids are different
## Need to see how to pass here for reference
#$seq1,$seq2,$show1,$show2=show_diferences($start,$end,\@array1,\@array2);
#$seq1,$seq2,$show1,$show2=show_diferences($start,$end,@array1,@array2);

my $display=0;
for ($k=$start;$k<$end;$k++){
      $display++;
      $amino1= $array1[$k]; ## Here we retrieve the sequences from start to end
      $amino2= $array2[$k];
      $amino3= $array3[$k]; ## Here we retrieve the sequences from start to end
      $amino4= $array4[$k];

       $seq1.=$amino1; ## we concatenate
       $seq2.=$amino2;
       $seq3.=$amino3; ## we concatenate
       $seq4.=$amino4;
  
      if(($amino1 ne $amino2)or ($amino1 ne $amino3)or ($amino1 ne $amino4)or
        ($amino2 ne $amino3)or ($amino2 ne $amino4)or ($amino3 ne $amino4)){
           $amino1= "$BBOLD".$amino1."$EBOLD";
           $amino2= "$BBOLD".$amino2."$EBOLD";  ## we colored them
           $amino3= "$BBOLD".$amino3."$EBOLD";
           $amino4= "$BBOLD".$amino4."$EBOLD";  ## we colored them

           }

          if($display%50==0){
           $amino1= $amino1."$BR";
           $amino2= $amino2."$BR";  ## we colored them
           $amino3= $amino3."$BR";
           $amino4= $amino4."$BR";  ## we colored them
           }


       $show1.=$amino1; ## we concatenate
       $show2.=$amino2;
       $show3.=$amino3; ## we concatenate
       $show4.=$amino4;
     }

## Following quatities needs to be here, after $seq1, $seq2 are calculated

#need to be fixed Im counting all the sequence and I shoul be conunting only the cooridnates


$len=&seq_length($seq1);
$proportion=&proportion($seq1,$seq2);

####################################################################
## Answers

$ham=&Hamming($seq1,$seq2);
$hamming = Compute("$ham");

$Pi_tajima=&tajima($Population,~~%SubPop); ## Calculates Pi tajima
$tajima=Compute("$Pi_tajima");
##############################################################
##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT
Pi_Tajima $Pi_tajima $BR
Population $Population $BR
Len $len $BR
Consider a population of $population gene, for which you have DNA sequences. If you want to estimate 
\(\theta\), the population mutation rate, you can use pi-Tajima estimator given by:$PAR

Tajima: $BR
\(\hat\pi=\frac{2}{n(n-1)}\sum_{i,j}\pi_{ij}\) 
$BR
\(\pi_{12}=\)  $BR\{$hamming->ans_rule\} $PAR
END_TEXT
Context()->normalStrings;
percent.

###########################################################
Context()->texStrings;
SOLUTION(EV3(<<'END_SOLUTION'));
$PAR SOLUTION $PAR
Using population size you have that n=$population $BR

END_SOLUTION
#############################################################
#  Text
#
#
Context()->texStrings;
BEGIN_TEXT
$PAR
 Now find  \(\hat\pi\) for  $name 's a human mexican population hypervariable mitochondrial loop.  Data are given below.
$PAR
\(\hat\pi\) = \{$tajima->ans_rule\}
END_TEXT

##############################################################
SOLUTION(EV3(<<'END_SOLUTION'));
$PAR SOLUTION $PAR

The correct answer for Hamming distance is $hamming because it is the number of differences between the two sequences $PAR

END_SOLUTION
###################################################################

BEGIN_TEXT
$PAR
Coordinates [$start-$end] of an alignment of the mithocondrial region $BR 
>$Keys[0]$BR 
$show1 $BR
>$Keys[1]$BR 
$show2 $BR
>$Keys[2]$BR 
$show2 $BR
>$Keys[3]$BR 
$show3 $BR


END_TEXT
Context()->normalStrings;

##############################################################
#
#  Answers
#
#

ANS($tajima->with(tolerance=>.0001)->cmp);
# relative tolerance --3.1412 is incorrect but 3.1413 is correct
# default tolerance is .01 or one 

ANS($hamming->with(tolerance=>.0001)->cmp);

Context()->texStrings;

Context()->normalStrings;
Context()->normalStrings;
ENDDOCUMENT();        
